#INCLUDE "TOTVS.CH"
#INCLUDE "TLPP-CORE.TH"
#INCLUDE "TLPP-REST.TH"

//POST com todos os campos
@POST('/pclientes')
User Function Postclientes()
	Local lRet             := .T.                                     as LOGICAL
	Local aDados           := {}                                      as ARRAY
	Local jJson            := Nil                                     as OBJECT
	Local jResponse        := JsonObject():New()                      as OBJECT
	Local cJson            := oRest:getBodyRequest()                  as OBJECT //Retornará todos os registros do corpo do Json
	Local aJsonTitulo      := {}                                      as ARRAY
	Local cError           := ''                                      as CHARACTER
	Local nLinha           := 0                                       as NUMERIC
	Local cDirLog          := '\x_logs\'                              as CHARACTER //Diretorio de Logs de erros
	Local cArqLog          := ''                                      as CHARACTER
	Local cErrorLog        := ''                                      as CHARACTER
	Local aLogAuto         := {}                                      as ARRAY
	Local nCampo           := 0                                       as NUMERIC
	Local nNome            := 0                                       as NUMERIC
	Local cTitulo          := ''                                      as CHARACTER
	Local cAliasWS         := 'SA1'                                   as CHARACTER
	Local aSA1             := FWSX3Util():GetAllFields( "SA1" , .T. ) as ARRAY //Retornará todos os campos presentes na SX3 do alias SA1
	Private lMsErroAuto    := .F.                                     as LOGICAL
	Private lMsHelpAuto    := .T.                                     as LOGICAL
	Private lAutoErrNoFile := .T.                                     as LOGICAL

	//Se não existir a pasta de logs, cria
	IF ! ExistDir(cDirLog)
		MakeDir(cDirLog)
	EndIF

	//Definindo o conteúdo como JSON, e pegando o content e dando um parse para ver se a estrutura está ok
	oRest:setKeyHeaderResponse('Content-Type','application/json')
	jJson  		:= JsonObject():New()
	cError		:= jJson:FromJson(cJson)
	aJsonTitulo := jJson:GetNames()

	//Se tiver algum erro no Parse, encerra a execução
	IF ! Empty(cError)
		//SetRestFault(500, 'Falha ao obter JSON') //caso queira usar esse comando, você não poderá usar outros retornos, como os abaixo
		oRest:setStatusCode(500)
		jResponse['errorId']  := 'NEW004'
		jResponse['error']    := 'Parse do JSON'
		jResponse['solution'] := 'Erro ao fazer o Parse do JSON'
	Else
		DbSelectArea(cAliasWS)

		cTitulo := Arrtokstr(aJsonTitulo)

		//Percorre todos os campos da SA1
		For nNome := 1 To Len(aSA1)
			//Se o campo da SA1 conter no body, adiciona ao Array
			If ALLTRIM(GetSX3Cache(aSA1[nNome], 'X3_TITULO')) $ cTitulo
				nPosFild := aScan(aJsonTitulo, ALLTRIM(GetSX3Cache(aSA1[nNome], 'X3_TITULO')))
				aadd(aDados, {Alltrim(GetSX3Cache(aSA1[nNome], 'X3_CAMPO')), jJson:GetJsonObject( aJsonTitulo[nPosFild] ), Nil})
			EndIf
		Next

		//Percorre os dados do execauto
		For nCampo := 1 To Len(aDados)
			//Se o campo for data, retira os hifens e faz a conversão
			If GetSX3Cache(aDados[nCampo][1], 'X3_TIPO') == 'D'
				aDados[nCampo][2] := StrTran(aDados[nCampo][2], '/', '')
				aDados[nCampo][2] := sToD(aDados[nCampo][2])
			EndIf
		Next

		//Chama a inclusão automática
		MsExecAuto({|x, y| MATA030(x, y)}, aDados, 3)

		//Se houve erro, gera um arquivo de log dentro do diretório da protheus data
		If lMsErroAuto
			//Monta o texto do Error Log que será salvo
			cErrorLog   := ''
			aLogAuto    := GetAutoGrLog()
			For nLinha := 1 To Len(aLogAuto)
				cErrorLog += aLogAuto[nLinha] + CRLF
			Next nLinha

			//Grava o arquivo de log
			cArqLog := 'pclientes_' + dToS(Date()) + '_' + StrTran(Time(), ':', '-') + '.log'
			MemoWrite(cDirLog + cArqLog, cErrorLog)

			//Define o retorno para o WebService
			//SetRestFault(500, cErrorLog) //caso queira usar esse comando, você não poderá usar outros retornos, como os abaixo
			oRest:setStatusCode(500)
			jResponse['errorId']  := 'NEW005'
			jResponse['error']    := 'Erro na inclusão do registro'
			jResponse['solution'] := 'Nao foi possivel incluir o registro, foi gerado um arquivo de log em ' + cDirLog + cArqLog + ' '
			lRet := .F.

			//Senão, define o retorno
		Else
			If "Codigo" $ cTitulo .AND. "Nome" $ cTitulo
				jResponse['Registro']     := 'Cliente '+jJson:GetJsonObject( 'Codigo' )+' - '+jJson:GetJsonObject( 'Nome' )+' incluido com sucesso'
			Else
				jResponse['Registro']     := 'Cliente incluido com sucesso'
			EndIf
		EndIf

	EndIf

	//Define o retorno
	oRest:setResponse(jResponse)
Return lRet

