#INCLUDE "TLPP-CORE.TH"
#INCLUDE "TLPP-REST.TH"

NameSpace custom.alteracliente
@DELETE('/api/v2/custom/delete/clientes')

/*/{Protheus.doc} deletecliente
	API para deletar dados da rotina de cadastro de clientes
	Exmplo abaixo mostra o Json que deve ser passado para o perfeito
	funcionamento da API:
		{
		"A1_COD":"API022",
		"A1_LOJA":"01"
		}
	Ou tembém pode ser passar somente o CPF ou CNPJ
		{
			"A1_CGC":"API022"
		}
@type function
@version 12.1.33
@author Gustavo Krebs
@since 20/jan/2023
/*/
User Function deletecliente()
	// Inicio do Json request --> a entrada do Json
	Local jRequest			:= JsonObject():New()					as object
	// Inicio do Json request -->  saída do Json
	Local jResponse 		:= JsonObject():New()					as object
	// Retorno o objeto do model em MVC do cadastro de cliente
	Local oModel 			:= FwLoadModel("CRMA980") 				as object
	Local aGterror  		:= {} 									as array
	local cBody 			:= oRest:getBodyRequest()				as character
	Local lOk				as Logical
	// Populo o JsonObjec através das informações contidas cBody --> getBodyRequest: Responsável por retornar o body da requisição HTTP
	jRequest:FromJSON(cBody)
	// Verifico se o Json passado é A1_COD e A1_LOJA
	If "A1_LOJA" $ cBody  .AND. "A1_COD" $ cBody
		DbSelectArea("SA1")
		// Se for A1_COD e A1_LOJA possiciono no indice 1
		SA1->( DbSetOrder(1) )
		// Posiciono no registro que vou deletar pagando o valor do Json. (Quando a chave é vazia ele deleta o primeiro registro): Então nesse caso faço uma verificação na chave
		If SA1->(DbSeek( xFilial("SA1") + jRequest['A1_COD'] + jRequest['A1_LOJA'] )) .AND. !Empty(jRequest['A1_COD']) .AND. !Empty(jRequest['A1_LOJA'])
			lOk := .T.
		Else
			lOk := .F.
		endif
	// Se o Json de entrada for A1_CGC
	ElseIf "A1_CGC" $ cBody
		DbSelectArea("SA1")
		// Posiciono no indice 3
		SA1->( DbSetOrder(3) )
		// Posiciono no registro que vou deletar pagando o valor do Json. (Quando a chave é vazia ele deleta o primeiro registro): Então nesse caso faço uma verificação na chave
		If SA1->(DbSeek( xFilial("SA1") + jRequest['A1_CGC'])) .AND. !Empty(jRequest['A1_CGC'])
			lOk := .T.
		Else
			lOk := .F.
		endif
	// Se o json estiver fora do modelo retorno falso
	Else
		lOk := .F.
	EndIf
	// se conseguir se possicionar no registro
	If lOk
		// O método que define a operação que será realizada no MVC.  No caso operação 5 é de delete
		oModel:SetOperation(5)
		// Ativo o modelo
		oModel:Activate()
		// Se o dados foram validados faz-se a gravação efetiva dos dados
		If oModel:VldData()
			// Confirmo o delete.
			oModel:CommitData()
			// Informo o status code de success
			oRest:setStatusCode(200)
			// Atribução do Status de success
			jResponse['status'] 	:= ' success '
			// Atribução da mensagen
			jResponse['message']	:= 'Registro deletado com sucesso'
		Else
			// Fornece uma estrutrura com a pilha de erro
			aGterror := oModel:GetErrorMessage()
			// Informo o status code 400 de error
			oRest:setStatusCode(400)
			// Atribução do Status de error
			jResponse['status'] 	:= " error"
			// Utilizo a 6° possisão do array, que é mensagem de erro
			jResponse['message']	:=  aGterror[6]
		EndIf
		// Desativação do MVC.
		oModel:DeActivate()
	Else
		// Informo o status code 400 de error
		oRest:setStatusCode(400)
		// Atribuição do Status de error
		jResponse['status'] 	:= " error"
		// Mensagem de erro
		jResponse['message']	:= " O registro não foi encontrado verifique as informções "
	endif
	// Define o Keep-Alive
	oRest:setKeyHeaderResponse('Connection','Keep-Alive')
	// Define o gzip
	oRest:setKeyHeaderResponse('Content-Encoding','gzip, deflate')
	// Define o Content-Type
	oRest:setKeyHeaderResponse('Content-Type','application/json')
	// Resposta do Json tanto success quanto error
	oRest:setResponse(jResponse:tojson())
	// Destroy o objeto e suas referencias a outros objetos.
	oModel:Destroy()
Return
