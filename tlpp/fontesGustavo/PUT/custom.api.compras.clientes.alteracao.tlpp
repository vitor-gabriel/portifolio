#INCLUDE "TLPP-CORE.TH"
#INCLUDE "TLPP-REST.TH"

NameSpace custom.alteracliente
@PUT('/api/v2/custom/put/clientes')

/*/{Protheus.doc} postcliente()
	Api para alteração de dados da rotina de cadastrp de clientes.
	Exmplo abaixo mostra o Json que deve ser passado para o perfeito
	funcionamento da API:
	{
		"A1_COD":"API022",
		"A1_LOJA":"01",
		"A1_NOME":"TESTE NUMERO 22 ",
		"A1_PESSOA": "F",
		"A1_END":"RUA TESTE 22 ",
		"A1_NREDUZ":"API 22",
		"A1_TIPO":"R",
		"A1_EST":"MT",
		"A1_MUN":"DOS TESTES 22",
		"A1_CGC":"88214966000"
	}
	No exemplo passamos o json utilizando os nomes dos campos da tabela SA1.
	Também é necessário passar os campos A1_COD e A1_LOJA, pois são utilizado
	para encontrar o registro que deseja alterar.
	os demais campos passado é opcional de acordo com oque deseja alterar.

@type function
@version 12.1.33
@author Gustavo Krebs
@since 20/jan/2023
/*/
User Function postcliente()
	// Inicio meu Json request --> a entrada do Json
	Local jRequest			:= JsonObject():New()					as object
	// Inicio meu Json request -->  saída do Json
	Local jResponse 		:= JsonObject():New()					as object
	Local aBody				:= {}					                as array
	// Retorno o objeto do model em MVC do cadastro de cliente
	Local oModel 			:= FwLoadModel("CRMA980") 				as object
	Local aGterror  		:= {} 									as array
	Local nEx				as numeric
	Local lOk				as logical
	// Populo o JsonObjec através das informações contidas cBody --> getBodyRequest: Responsável por retornar o body da requisição HTTP
	jRequest:FromJSON(oRest:getBodyRequest())
	// Array que recebera os nomes dos componentes Json
	aBody		:= jRequest:GetNames()
	DbSelectArea("SA1")
	SA1->( DbSetOrder(1) )
	// Posiciono no registro que vou alterar pagando o valor do Json. (Quando a chave é vazia ele altera o primeiro registro): Então nesse caso faço uma verificação na chave
	If SA1->(DbSeek( xFilial("SA1") + jRequest['A1_COD'] + jRequest['A1_LOJA'] )) .AND. !Empty(jRequest['A1_COD']) .AND. !Empty(jRequest['A1_LOJA'])
		// O método que define a operação que será realizada no MVC.
		oModel:SetOperation(4) // No caso operação de Insert
		// Ativo o modelo
		oModel:Activate()
		For nEx := 1 To Len(aBody)
			// Os campos codigo e loja não pode ser alterados...
			IF aBody[nEx] <> "A1_COD" .AND. aBody[nEx] <> "A1_LOJA"
				If GetSX3Cache(aBody[nEx], 'X3_TIPO') <> 'D'
					// Informo o campo no SetValue(com o mvalor que está contido na possição do array), Informo o valor jRequest[com o mvalor que está contido no array]
					oModel:GetModel('SA1MASTER'):SetValue(aBody[nEx], jRequest[aBody[nEx]])
				Else
					// Tratativa para o campo do tipo data (Utilizado (CTOD) --> Converte de caracter("18/01/2022") para data (18/01/22))
					oModel:GetModel('SA1MASTER'):SetValue(aBody[nEx], CTOD(jRequest[aBody[nEx]]))
				Endif
			Endif
		Next
		// Se o dados foram validados faz-se a gravação efetiva dos dados
		If oModel:VldData()
			// Grava os dados do objeto modelo.
			lOk := oModel:CommitData()
			// Informo o status code de success
			oRest:setStatusCode(200)
			// Atribução do Status de success
			jResponse['status'] 	:= ' success '
			// Atribução da mensagen
			jResponse['message']	:= 'Cliente : '+ jRequest['A1_COD']+' alterado com sucesso '
		// Se os dados passado no json não for validos faço a tratativa de erro
		Else
			// Fornece uma estrutrura com a pilha de erro
			aGterror := oModel:GetErrorMessage()
			// Informo o status code 400 de error
			oRest:setStatusCode(400)
			// Atribução do Status de error
			jResponse['status'] 	:= " error"
			// Utilizo a 6° possisão do array, que é mensagem de erro
			jResponse['message']	:=  aGterror[6]
		EndIf
		// Desativação do MVC.
		oModel:DeActivate()
	// Em caso de não encontrar o registro, retorno erro
	Else
		// Informo o status code 400 de error
		oRest:setStatusCode(400)
		// Atribuição do Status de error
		jResponse['status'] 	:= " error"
		// Mensagem de erro
		jResponse['message']	:= " Não foi encontrado, A1_COD:"
		jResponse['message']	+= jRequest['A1_COD']
		jResponse['message']	+= " ou A1_LOJA:  " + jRequest['A1_LOJA']
	endif
	// Define o Keep-Alive
	oRest:setKeyHeaderResponse('Connection','Keep-Alive')
	// Define o gzip
	oRest:setKeyHeaderResponse('Content-Encoding','gzip, deflate')
	// Define o Content-Type
	oRest:setKeyHeaderResponse('Content-Type','application/json')
	// Resposta do Json tanto success quanto error
	oRest:setResponse(jResponse:tojson())
	// Destroy o objeto e suas referencias a outros objetos.
	oModel:Destroy()
Return
